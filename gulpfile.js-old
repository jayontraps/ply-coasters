var gulp        = require('gulp');
var browserSync = require('browser-sync').create();
var sass        = require('gulp-sass');
var sourcemaps = require('gulp-sourcemaps');
var pleeease = require('gulp-pleeease');
var postcss = require('gulp-postcss');
var lost    = require('lost');
var autoprefixer = require('autoprefixer');

var browserify = require('browserify'),
    jshint = require('gulp-jshint'),
    stylish = require('jshint-stylish'),
    uglify = require('gulp-uglify'),
    concat = require('gulp-concat'),
    deporder = require('gulp-deporder'),
    source = require('vinyl-source-stream');

var gutil = require('gulp-util'),
    notify = require('gulp-notify'),
    gulpif = require('gulp-if');


var css = {
    pleeeaseOpts: {
        autoprefixer: { browsers: ['last 2 versions', '> 2%'] },
        rem: ['16px'],
        pseudoElements: true,
        mqpacker: true
    }
};

var devBuild = ((process.env.NODE_ENV || 'dev').trim().toLowerCase() !== 'prod');

var src = 'src/';
var dest = 'build/';

function errorAlert(error){
    notify.onError({
        title: "Error", 
        message: "Check your terminal", 
        sound: "Sosumi"})(error); 
    console.log(error.toString());
    this.emit("end"); 
};



/* SASS */

// Compile sass into CSS & auto-inject into browsers
// gulp.task('sass', function() {

//     return gulp.src("scss/screen.scss")

//     	.pipe(sourcemaps.init())
//         .pipe(sass({outputStyle: 'nested'}))

//         .pipe(postcss([
//               lost(),
//               autoprefixer({
//                 browsers: ['last 2 versions']
//             })
//         ]))         

//         // .pipe(pleeease(css.pleeeaseOpts))
//         .pipe(sourcemaps.write())
//         .pipe(gulp.dest("css"))
//         .pipe(browserSync.stream());

// });


gulp.task('sass', function() {
    return gulp.src(src + "scss/screen.scss")        
        .pipe(sourcemaps.init())
        .pipe(sass({outputStyle: 'nested'}))
        .on('error', errorAlert)  
        .pipe(postcss([
              lost(),
              autoprefixer({
                browsers: ['last 2 versions']
            })
        ]))         
        .pipe(sourcemaps.write())
        .pipe(gulp.dest(dest + "css"))
        .pipe(browserSync.stream());
});


gulp.task('minify-css', function() {
    if (!devBuild) {
        return gulp.src( dest + 'css/*.css' )
            .pipe(minifyCss({compatibility: 'ie8'}))
            .pipe(gulp.dest(dest + 'css'));  
    }  
});






/* JS */

gulp.task('js', function() {
    return gulp.src(src + 'js/plugins/*.js')
        .pipe(deporder())
        .pipe(concat('plugins.js'))
        .pipe(gulp.dest(dest + 'js/'));
});


gulp.task('combine', [ 'browserify', 'js' ], function() {
    return gulp.src([ dest + 'js/plugins.js', dest + 'js/bundle.js' ])
    .pipe(concat('all.min.js'))
    .pipe(gulpif(!devBuild, uglify()))
    .pipe(gulp.dest(dest + 'js/'));
});



gulp.task('lintjs', function() {
    return gulp.src(src + 'js/app/**/*.js')
        .pipe(jshint())
        .pipe(jshint.reporter(stylish));
});



gulp.task('browserify', function () {
    return browserify(src + 'js/app/entry', { debug: true})
        .bundle()   
        .on('error', errorAlert)     
        .pipe(source('bundle.js'))        
        .pipe(gulp.dest(dest + 'js'));
});






// Static Server + watching scss/html files
// gulp.task('serve', ['sass'], function() {

//     browserSync.init({
//         // server: "./"
//         proxy: "localhost/coasters",
//     });

//     gulp.watch("scss/**/*.scss", ['sass']);
//     gulp.watch("**/*.php").on('change', browserSync.reload);
// });







gulp.task('browser-sync', function() {
    browserSync({

        proxy: "localhost/coasters"  
        // server: {
        //     baseDir: "./build"
        // }
    });
});

gulp.task('reload-js', ['lintjs', 'combine' ], function() {
    browserSync.reload();   
});

gulp.task('reload-css', ['sass'], function() {
    browserSync.reload();
});


gulp.task('watch', ['sass', 'lintjs', 'combine', 'browser-sync'], function() {
    gulp.watch(src + 'js/**/*.js', ['reload-js']);
    gulp.watch(src + 'scss/**/*.scss', ['reload-css']);
});


gulp.task('default', ['watch']);







// gulp.task('default', ['serve']);






